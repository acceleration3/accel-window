#ifndef ACCEL_WINDOW_HEADER
#define ACCEL_WINDOW_HEADER

#include <vector>

#include <cstdint>

#include <accel/macros>
#include <accel/flagset>
#include <accel/utf8>

namespace accel
{
	enum class mouse_buttons
	{
		left,
		middle,
		right,
		backwards,
		forwards
	};

	struct mouse_click_event
	{
		bool is_mouse_down;
		mouse_buttons button;
		int x;
		int y;
	};

	struct mouse_move_event
	{
		int x;
		int y;
	};

	struct mouse_scroll_event
	{
		int x;
		int y;
		int scroll_lines;
	};

	struct key_event
	{
		bool is_key_down;
		int keycode;
		int repeat;
	};

	struct resize_event
	{
		unsigned int width;
		unsigned int height;
		unsigned int client_width;
		unsigned int client_height;
	};

	enum class event_types
	{
		mouse_click,
		mouse_move,
		mouse_scroll,
		key,
		resize,
	};

	struct generic_event
	{
		event_types type;
		union
		{
			mouse_click_event mouse_click;
			mouse_move_event mouse_move;
			mouse_scroll_event mouse_scroll;
			key_event key;
			resize_event resize;
		};

		generic_event(mouse_click_event&& click) : type(event_types::mouse_click), mouse_click(std::move(click)) {}
		generic_event(mouse_move_event&& move) : type(event_types::mouse_move), mouse_move(std::move(move)) {}
		generic_event(mouse_scroll_event&& scroll) : type(event_types::mouse_scroll), mouse_scroll(std::move(scroll)) {}
		generic_event(key_event&& key) : type(event_types::key), key(std::move(key)) {}
		generic_event(resize_event&& resize) : type(event_types::resize), resize(std::move(resize)) {}
	};

	enum class window_style_bits
	{
		resizable,
		undecorated,
		hidden,
		hide_mouse,
		trap_mouse,
		_
	};

	struct window_create_params
	{
		utf8::string title;
		unsigned int width;
		unsigned int height;
		flagset<window_style_bits> style;
	};
}

#ifdef PLATFORM_WINDOWS
	#include "impls/win32_window.inl"
#else
	#error "No window implementation for this platform."
#endif

#endif