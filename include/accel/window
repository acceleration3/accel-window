#ifndef ACCEL_WINDOW_HEADER
#define ACCEL_WINDOW_HEADER

#include <vector>

#include <cstdint>

#include <accel/macros>
#include <accel/flagset>
#include <accel/utf8>

namespace accel
{
	enum class mouse_buttons
	{
		left,
		middle,
		right,
		backwards,
		forwards
	};

	enum class mouse_scroll_directions
	{
		up,
		down
	};

	struct mouse_down_event
	{
		mouse_buttons button;
		int x;
		int y;
	};

	struct mouse_up_event
	{
		mouse_buttons button;
		int x;
		int y;
	};

	struct mouse_move_event
	{
		int x;
		int y;
	};

	struct mouse_scroll_event
	{
		int x;
		int y;
		mouse_scroll_directions direction;
	};

	struct key_down_event
	{
		unsigned int keycode;
	};

	struct key_up_event
	{
		unsigned int keycode;
	};

	struct resize_event
	{
		unsigned int width;
		unsigned int height;
		unsigned int client_width;
		unsigned int client_height;
	};

	enum class event_types
	{
		mouse_up,
		mouse_down,
		mouse_move,
		mouse_scroll,
		key_up,
		key_down,
		resize,
	};

	struct generic_event
	{
		event_types type;
		union
		{
			mouse_up_event mouse_up;
			mouse_down_event mouse_down;
			mouse_move_event mouse_move;
			mouse_scroll_event mouse_scroll;
			key_up_event key_up;
			key_down_event key_down;
			resize_event resize;
		};

		generic_event(mouse_up_event&& mouse_up) : type(event_types::mouse_up), mouse_up(std::move(mouse_up)) {}
		generic_event(mouse_down_event&& mouse_down) : type(event_types::mouse_down), mouse_down(std::move(mouse_down)) {}
		generic_event(mouse_move_event&& move) : type(event_types::mouse_move), mouse_move(std::move(move)) {}
		generic_event(mouse_scroll_event&& scroll) : type(event_types::mouse_scroll), mouse_scroll(std::move(scroll)) {}
		generic_event(key_up_event&& key_up) : type(event_types::key_up), key_up(std::move(key_up)) {}
		generic_event(key_down_event&& key_down) : type(event_types::key_down), key_down(std::move(key_down)) {}
		generic_event(resize_event&& resize) : type(event_types::resize), resize(std::move(resize)) {}
	};

	enum class window_style_bits
	{
		resizable,
		undecorated,
		hidden,
		hide_mouse,
		trap_mouse,
		_
	};

	struct window_create_params
	{
		utf8::string title;
		unsigned int client_width;
		unsigned int client_height;
		flagset<window_style_bits> style;
	};
}

#if defined(PLATFORM_WINDOWS)
	#include "impls/win32_window.inl"
#elif defined(PLATFORM_LINUX)
	#ifdef USE_X11
		#include "impls/x11_window.inl"
	#else
		#include "impls/wayland_window.inl"
	#endif
#else
	#error "No window implementation for this platform."
#endif

#endif